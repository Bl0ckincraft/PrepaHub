<!doctype html>
<html>
<head>
    <title>PrépaLib{% if block("title") is not empty %} | {% block title %}{% endblock %}{% endif %}</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content="La bibliothèque faite pour les prépas.">
    <link rel="icon" href="{{ asset("images/icon.png") }}">
    {% block stylesheets %}
        {{ encore_entry_link_tags('app') }}
    {% endblock %}

    {% block scripts %}
        <script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
        <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
        <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
        {{ encore_entry_script_tags('app') }}
        <script>
            MathJax = {
                tex: {
                    inlineMath: [['$', '$']],
                    processEscapes: true,
                    macros: {
                        llbracket: '⟦',
                        rrbracket: '⟧',
                        cad: '\\text{c\'est-à-dire}',
                        rg: '\\text{rg}',
                        dim: '\\text{dim}',
                        sup: '\\text{sup}',
                        inf: '\\text{inf}',
                        et: '\\text{ et }',
                        divise: '\\mid',
                        prem: '\\mathbb P',
                        K: '\\mathbb K',
                        C: '\\mathbb C',
                        Rb: '\\overline{\\mathbb R}',
                        R: '\\mathbb R',
                        Q: '\\mathbb Q',
                        Z: '\\mathbb Z',
                        N: '\\mathbb N',
                        Cp: '\\mathbb C_+',
                        Rbp: '\\overline{\\mathbb R}_+',
                        Rp: '\\mathbb R_+',
                        Qp: '\\mathbb Q_+',
                        Zp: '\\mathbb Z_+',
                        Np: '\\mathbb N_+',
                        Cm: '\\mathbb C_-',
                        Rbm: '\\overline{\\mathbb R}_-',
                        Rm: '\\mathbb R_-',
                        Qm: '\\mathbb Q_-',
                        Zm: '\\mathbb Z_-',
                        Nm: '\\mathbb N_-',
                        Cs: "\\mathbb C^*",
                        Rbs: '\\overline{\\mathbb R}^*',
                        Rs: '\\mathbb R^*',
                        Qs: '\\mathbb Q^*',
                        Zs: '\\mathbb Z^*',
                        Ns: '\\mathbb N^*',
                        U: '\\mathbb U',
                        D: '\\mathbb D',
                        H: '\\mathbb H',
                        Cps: "\\mathbb C_+^*",
                        Rbps: '\\overline{\\mathbb R}_+^*',
                        Rps: '\\mathbb R_+^*',
                        Qps: '\\mathbb Q_+^*',
                        Zps: '\\mathbb Z_+^*',
                        Nps: '\\mathbb N_+^*',
                        Cms: "\\mathbb C_-^*",
                        Rbms: '\\overline{\\mathbb R}_-^*',
                        Rms: '\\mathbb R_-^*',
                        Qms: '\\mathbb Q_-^*',
                        Zms: '\\mathbb Z_-^*',
                        Nms: '\\mathbb N_-^*',
                        conj: ['\\overline{ #1 }', 1],
                        func: ["#1 : #2 \\longrightarrow #3", 3],
                        funcf: ["\\begin{array}{c} #1:& #2 & \\longrightarrow & #3 \\\\ & #4 & \\longmapsto & #5 \\end{array}", 5],
                        funcflambda: ["\\begin{array}{c} #1 & \\longrightarrow & #2 \\\\ #3 & \\longmapsto & #4 \\end{array}", 4],
                        funcv: ["#1 : #2 \\longmapsto #3", 3],
                        odif: ["\\text{ d}#1", 1],
                        par: ["\\left(#1\\right)", 1],
                        cro: ["\\left[#1\\right]", 1],
                        abs: ["\\left\\lvert #1\\right\\rvert", 1],
                        floor: ["\\left\\lfloor #1\\right\\rfloor", 1],
                        ceil: ["\\left\\lceil #1\\right\\rceil", 1],
                        valp: ["v_{ #1 }\\par{ #2 }", 2],
                        e: ["e^{ #1 }", 1],
                        sh: '\\text{sh }',
                        id: '\\text{id }',
                        P: ['\\Pscr\\par{ #1 }', 1],
                        F: ['\\Fscr\\par{; #1, #2}', 2],
                        ind: ["\\mathbb 1_{ #1 }", 1],
                        prim: '^{\'}',
                        seconde: '^{\'\'}',
                        poly: ['#1\\cro{X}', 1],
                        fracrat: ['#1\\par{X}', 1],
                        polydeg: ['\\poly{ #1_{ #2 } }', 2],
                        deriv: ['^{\\par{ #1 }}', 1],
                        ensclasse: ['\\Cscr^{ #1 }\\par{ #2, \\; #3 }', 3],
                        intervii: ["\\left [ #1; #2\\right ]", 2],
                        intervie: ["\\left [ #1; #2\\right [", 2],
                        intervei: ["\\left ] #1; #2\\right ]", 2],
                        intervee: ["\\left ] #1; #2\\right [", 2],
                        intervintii: ["\\llbracket #1; #2 \\rrbracket", 2],
                        intervintie: ["\\llbracket #1; #2 \\llbracket", 2],
                        intervintei: ["\\rrbracket #1; #2 \\rrbracket", 2],
                        intervintee: ["\\rrbracket #1; #2 \\llbracket", 2],
                        pinf: ["+\\infty"],
                        minf: ["-\\infty"],
                        braces: ["\\left\\{ #1 \\right\\}", 1],
                        cotan: ["\\text{cotan }"],
                        o: ["o\\par{ #1 }", 1],
                        O: ["\\Oscr\\par{ #1 }", 1],
                        permu: ["\\par{ \\begin{array}{l} #1 \\\\ #2 \\end{array} }", 2],
                        cycle: ["\\par{ \\begin{array}{l} #1 \\end{array} }", 1],
                        egqd: ["\\underset{ #1 }{=}", 1],
                        simqd: ["\\underset{ #1 }{\\sim}", 1],
                        norme: ["\\lVert #1 \\rVert", 1],
                        sym: ["\\mathcal S_{ #1 }\\par{ #2 }", 2],
                        ps: ["\\langle #1 \\mid #2 \\rangle", 2],
                        ortho: ["^\\perp"],
                        Aut: ["\\text{Aut}\\par{ #1 }", 1],
                        Hom: ["\\text{Hom}\\par{ #1 }", 1],
                        group: ["\\par{ #1 ,\\; #2 }", 2],
                        ring: ["\\par{ #1 ,\\; #2,\\; #3 }", 3],
                        rel: '\\Rscr',
                        restr: ["#1\\vert_{ #2 }", 2],
                        Arctan: '\\text{Arctan }',
                        Arcsin: '\\text{Arcsin }',
                        Arccos: '\\text{Arccos }',
                        Card: '\\text{Card }',
                        supp: '\\text{supp }',
                        croix: '^{\\times}',
                        Im: '\\text{Im }',
                        Re: '\\text{Re }',
                        Lendo: ['\\Lscr\\par{ #1 }', 1],
                        fami: ['\\mathscr{ #1 }', 1],
                        landoile: '^*',
                        L: ['\\Lscr\\par{ #1, #2 }', 2],
                        Vect: ['\\text{Vect} \\par{ #1 }', 1],
                        GL: ['\\text{GL}_{ #1 }\\par{ #2 }', 2],
                        M: ['\\Mscr_{ #1 }\\par{ #2 }', 2],
                        pass: ['\\Pscr_{ #1 \\longrightarrow #2 }', 2],
                        trans: ['^t\\! #1', 1],
                        tr: '\\text{tr }',
                        Mat: ['\\text{Mat}_{ #1 }\\par{ #2 }', 2],
                        tcoords: ['\\par{\\begin{array}{l} #1 \\\\ #2 \\\\ #3 \\end{array}}', 3],
                        dcoords: ['\\par{\\begin{array}{l} #1 \\\\ #2 \\end{array}}', 2],
                        proba: ['\\mathbb P \\par{ #1 }', 1],
                        loiuniforme: ['\\mathcal U\\par{ #1 }', 1],
                        cov: ['\\text{Cov }\\par{ #1, #2 }', 2],
                        frakA: ['\\mathfrak A_{ #1 }', 1],
                        S: ['\\mathfrak S_{ #1 }', 1],
                        guillemets: ['« \\text{ #1 } »', 1],
                        detb: ['\\text{det}_{ #1 }#1', 1],
                        pdv: ['\\dfrac{\\partial #1 }{\\partial #2 }', 2],
                        pdv2: ['\\dfrac{\\partial^2 #1 }{\\partial #2 \\partial #3 }', 3],
                        iddots: "\\mathinner{\\mkern1mu\\raise1pt\\hbox{.}\\mkern2mu\\raise4pt\\hbox{.}\\mkern2mu\\raise7pt\\hbox{.}}",
                        Ascr: ["\\mathscr{A}"],
                        Bscr: ["\\mathscr{B}"],
                        Cscr: ["\\mathscr{C}"],
                        Dscr: ["\\mathscr{D}"],
                        Escr: ["\\mathscr{E}"],
                        Fscr: ["\\mathscr{F}"],
                        Gscr: ["\\mathscr{G}"],
                        Hscr: ["\\mathscr{H}"],
                        Iscr: ["\\mathscr{I}"],
                        Jscr: ["\\mathscr{J}"],
                        Kscr: ["\\mathscr{K}"],
                        Lscr: ["\\mathscr{L}"],
                        Mscr: ["\\mathscr{M}"],
                        Nscr: ["\\mathscr{N}"],
                        Oscr: ["\\mathscr{O}"],
                        Pscr: ["\\mathscr{P}"],
                        Qscr: ["\\mathscr{Q}"],
                        Rscr: ["\\mathscr{R}"],
                        Sscr: ["\\mathscr{S}"],
                        Tscr: ["\\mathscr{T}"],
                        Uscr: ["\\mathscr{U}"],
                        Vscr: ["\\mathscr{V}"],
                        Wscr: ["\\mathscr{W}"],
                        Xscr: ["\\mathscr{X}"],
                        Yscr: ["\\mathscr{Y}"],
                        Zscr: ["\\mathscr{Z}"],
                    }
                },
                options: {
                    skipHtmlTags: ['script', 'noscript', 'textarea', 'pre'],
                    enableMenu: false
                }
            };

            // Fonction pour initialiser la prévisualisation LaTeX
            const initLatexPreview = (input) => {
                if (!input) return;

                const id = input.id || `latex-preview-${Math.random().toString(36).substr(2, 9)}`;
                input.id = id;

                let previewContainer = input.nextElementSibling;
                if (!previewContainer || !previewContainer.classList.contains('latex-preview-container')) {
                    previewContainer = document.createElement('div');
                    previewContainer.className = 'latex-preview-container mt-2';
                    previewContainer.innerHTML = `
                <div class="text-sm text-text-300">Prévisualisation :</div>
                <div class="latex-preview whitespace-pre p-4 bg-foreground-400 rounded" data-preview-for="${id}"></div>
            `;
                    input.parentNode.insertBefore(previewContainer, input.nextSibling);
                }

                const preview = previewContainer.querySelector('.latex-preview');

                const render = () => {
                    preview.innerHTML = input.value;
                    if (window.MathJax && MathJax.typesetPromise) {
                        MathJax.typesetPromise([preview]);
                    }
                };

                input.addEventListener('input', render);
                render();
            };

            document.addEventListener('DOMContentLoaded', function () {
                // Initialisation des prévisualisations existantes
                document.querySelectorAll('.latex-input').forEach(initLatexPreview);

                // Initialisation automatique des latex preview ajoutées et les latex tout court
                const observer = new MutationObserver((mutations) => {
                    for (const mutation of mutations) {
                        for (const addedNode of mutation.addedNodes) {
                            if (addedNode.nodeType !== Node.ELEMENT_NODE) continue;

                            addedNode.querySelectorAll('.latex-input').forEach(initLatexPreview);
                            MathJax.typesetPromise(addedNode.querySelectorAll('.latex'));
                        }
                    }
                });

                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
            });
        </script>
        <script>
            const ExercisePref = (function() {
                function setPref(exerciseId, data, after = function () {}, afterError = function () {}) { // data example: {"favorite": true}
                    const url = "{{ path('api_set_preference', {'exercise': 'EXERCISE_ID'}) }}".replaceAll('EXERCISE_ID', exerciseId);
                    fetch(url, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        body: JSON.stringify(data)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Erreur HTTP : ' + response.status);
                            }

                            return response.json();
                        })
                        .then(data => {
                            updatePrefContainers([data.pref]);
                            after()
                        })
                        .catch(error => {
                            console.error('Erreur fetch :', error); // TODO : NOTIFICATION
                            afterError();
                        });
                }

                function updatePrefContainers(prefs) {
                    for (const pref of prefs) {
                        document.querySelectorAll(`.prefs-${pref.exercise}`).forEach(container => {
                            const doneT = container.querySelector(".done .true");
                            if (pref.done) doneT.classList.remove("hidden!");
                            else doneT.classList.add("hidden!");

                            const doneF = container.querySelector(".done .false");
                            if (pref.done) doneF.classList.add("hidden!");
                            else doneF.classList.remove("hidden!");

                            const favoriteT = container.querySelector(".favorite .true");
                            if (pref.favorite) favoriteT.classList.remove("hidden!");
                            else favoriteT.classList.add("hidden!");

                            const favoriteF = container.querySelector(".favorite .false");
                            if (pref.favorite) favoriteF.classList.add("hidden!");
                            else favoriteF.classList.remove("hidden!");

                            const difficultyContainer = container.querySelector(".difficulty");
                            const unselectedColor = difficultyContainer.dataset.unselectedColor;

                            difficultyContainer.querySelectorAll(".difficulty-element").forEach(element => {
                                const selectedColor = element.dataset.selectedColor;
                                if (parseInt(element.dataset.difficulty) === pref.difficulty) {
                                    element.classList.remove(unselectedColor);
                                    element.classList.add(selectedColor);
                                } else {
                                    element.classList.remove(selectedColor);
                                    element.classList.add(unselectedColor);
                                }
                            })

                            const nonCommentedText = container.querySelector(".non-commented-text");
                            const commentContainer = container.querySelector(".comment-container");

                            if (pref.comment.trim() === "") {
                                nonCommentedText.classList.remove("hidden");
                                commentContainer.classList.add("hidden");
                                commentContainer.innerText = "";
                            } else {
                                nonCommentedText.classList.add("hidden");
                                commentContainer.classList.remove("hidden");
                                commentContainer.innerText = pref.comment;
                            }
                        });
                    }
                }

                return {
                    setPref: setPref
                }
            })();
        </script>
    {% endblock %}
</head>
<body class="text-text-100 font-noto-sans bg-background-500 min-h-[100dvh] min-w-[100dvw] p-0 m-0 select-none">
    <twig:Loader />
    {% block body %}
    {% endblock %}
</body>
</html>
